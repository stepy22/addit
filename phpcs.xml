<?xml version="1.0"?>
<ruleset name="CreITive PHPCS rules">
 <description>The coding standard used for all CreITive projects.</description>

 <!-- Files to scan. -->
 <file>./app</file>
 <file>./config</file>
 <file>./src</file>
 <file>./database</file>
 <file>./resources/lang</file>
 <exclude-pattern>*.blade.php</exclude-pattern>

 <!-- Reporting options. -->
 <arg name="report" value="full"/>
 <arg value="p"/>
 <arg name="colors"/>

 <!-- Rules to apply. -->

 <!-- PSR-2 standard. -->
 <rule ref="PSR2"/>

 <!-- Database migrations and seeds use a different class naming convention,
 because that's how Laravel does it. I guess this helps with making the
 migration system simpler. -->
 <rule ref="PSR1.Classes.ClassDeclaration">
  <exclude-pattern>./database/*</exclude-pattern>
 </rule>

 <!-- Some commenting rules. -->
 <rule ref="Squiz.Commenting.DocCommentAlignment"/>
 <rule ref="Squiz.Commenting.EmptyCatchComment"/>
 <rule ref="Squiz.Commenting.FunctionCommentThrowTag"/>
 <rule ref="Squiz.Commenting.InlineComment">
  <!-- Don't sniff config files for this as we use docblocks to document
  individual configuration options, and we think this is fine for now. We might
  revisit this at a later time, though. -->
  <exclude-pattern>./config/*</exclude-pattern>
 </rule>

 <!-- Only use short array syntax, ie. `[]` instead of `array()`. -->
 <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>

 <!-- Multi-line arrays should have a comma after the last element. -->
 <rule ref="vendor/escapestudios/symfony2-coding-standard/Symfony2/Sniffs/Arrays/MultiLineArrayCommaSniff.php"/>

 <!-- Function comments should be formatted as per Symfony2 coding standards. -->
 <rule ref="vendor/escapestudios/symfony2-coding-standard/Symfony2/Sniffs/Commenting/FunctionCommentSniff.php"/>

 <!-- There should be a blank line before a `return` statement (unless the
 statement is the first statement in a block). -->
 <rule ref="vendor/escapestudios/symfony2-coding-standard/Symfony2/Sniffs/Formatting/BlankLineBeforeReturnSniff.php"/>

 <!-- "use" statements (both imports and traits) should be sorted alphabetically. -->
 <rule ref="vendor/spryker/code-sniffer/Spryker/Sniffs/Namespaces/UseInAlphabeticalOrderSniff.php"/>

 <!-- Prefer strict comparison to `null` instead of calling `is_null()`. -->
 <rule ref="vendor/spryker/code-sniffer/Spryker/Sniffs/PHP/NoIsNullSniff.php"/>

 <!-- Use the `PHP_SAPI` constant instead of calling `php_sapi_name()`. -->
 <rule ref="vendor/spryker/code-sniffer/Spryker/Sniffs/PHP/PhpSapiConstantSniff.php"/>

 <!-- Prefer type casting instead of using functions for that. -->
 <rule ref="vendor/spryker/code-sniffer/Spryker/Sniffs/PHP/PreferCastOverFunctionSniff.php"/>

 <!-- Don't use certain PHP function aliases. -->
 <rule ref="vendor/spryker/code-sniffer/Spryker/Sniffs/PHP/RemoveFunctionAliasSniff.php"/>

 <!-- Prefer short casts for bools and ints, e.g. bool vs. boolean. -->
 <rule ref="vendor/spryker/code-sniffer/Spryker/Sniffs/PHP/ShortCastSniff.php"/>

 <!-- Correct comma spacing (no space before, one space after). -->
 <rule ref="vendor/spryker/code-sniffer/Spryker/Sniffs/Whitespace/CommaSpacingSniff.php"/>

 <!-- Never have two empty lines in a row. -->
 <rule ref="vendor/spryker/code-sniffer/Spryker/Sniffs/Whitespace/EmptyLinesSniff.php"/>

 <!-- Correct whitespace when doing implicit casting. -->
 <rule ref="vendor/spryker/code-sniffer/Spryker/Sniffs/Whitespace/ImplicitCastSpacingSniff.php"/>

 <!-- Correct spacing for member var declarations. -->
 <rule ref="vendor/spryker/code-sniffer/Spryker/Sniffs/Whitespace/MemberVarSpacingSniff.php"/>

 <!-- Correct method declaration spacing. -->
 <rule ref="vendor/spryker/code-sniffer/Spryker/Sniffs/Whitespace/MethodSpacingSniff.php"/>

 <!-- Object operators and class double colons should have no spacing around them. -->
 <rule ref="vendor/spryker/code-sniffer/Spryker/Sniffs/Whitespace/ObjectAttributeSpacingSniff.php"/>

 <!-- Valid operator spacing. -->
 <rule ref="vendor/spryker/code-sniffer/Spryker/Sniffs/Whitespace/OperatorSpacingSniff.php"/>
</ruleset>
